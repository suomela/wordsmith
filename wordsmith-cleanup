#!/usr/bin/env python3

import xlsxwriter
import io
import re
import string
import sys


# Which column to read
COLUMN = "Concordance"

# Which characters are considered to be part of a word
WORDCHAR = set(string.ascii_letters + string.digits + "-'")

CLEANUP1 = re.compile(r"[^a-zA-Z0-9'-]+")
CLEANUP2 = re.compile(r"[a-zA-Z0-9]")

class Convert:
    def __init__(self, marker):
        self.marker = marker

    def parse_tsv(self, s):
        # Wordsmith seems to use non-breaking spaces as thousand separators.
        # We will remove all of them.
        return s.replace(u"\u00A0", "").rstrip("\n").split("\t")

    def read_tsv(self):
        return self.parse_tsv(self.f.readline())

    def find_rword(self, conc):
        m = conc.index(self.marker)
        m2 = conc.rindex(self.marker)
        assert m == m2
        tail = m + len(self.marker)
        text = conc[:m] + conc[tail:]
        x = m
        y = m
        while x > 1 and text[x-1] in WORDCHAR:
            x -= 1
        while y < len(text) - 1 and text[y] in WORDCHAR:
            y += 1
        return text[:x], text[x:y], text[y:]

    def cleanup_word(self, rword):
        return rword.lower()

    def cleanup_phrase(self, s, reverse=False):
        s = s.lower()
        l = CLEANUP1.split(s)
        l = [x for x in l if CLEANUP2.match(x) is not None]
        if reverse:
            l = reversed(l)
        return ' '.join(l)

    def new_row(self, orow, nconc):
        nrow = []
        for i, v in enumerate(orow):
            if i == self.conci:
                nrow.extend(nconc)
            else:
                nrow.append(v)
        return nrow

    def process_head(self):
        # Row 1
        l = self.read_tsv()
        assert len(l) == 1
        assert l[0].startswith("WordSmith Tools ")

        # Row 2
        l = self.read_tsv()
        assert len(l) == 1
        assert l[0] == ""

        # Row 3
        self.header = self.read_tsv()
        self.conci = self.header.index(COLUMN)
        self.nheader = self.new_row(
            self.header,
            ["Before", "Word", "After", "Simple", "Left context", "Right context"],
        )
        self.widths = []
        for c, elem in enumerate(self.nheader):
            self.worksheet.write(0, c, elem)
            self.widths.append(0)

    def column(self, name):
        return self.nheader.index(name)

    def write_string(self, r, c, elem):
        self.worksheet.write_string(r, c, elem)
        w = len(elem)
        if self.widths[c] < w:
            self.widths[c] = w

    def process_rest(self):
        r = 1
        while True:
            l = self.f.readline()
            if l == '':
                break
            row = self.parse_tsv(l)
            assert len(self.header) == len(row)
            conc = row[self.conci]
            pre, rword, post = self.find_rword(conc)
            word = self.cleanup_word(rword)
            left = self.cleanup_phrase(pre, True)
            right = self.cleanup_phrase(post, False)
            nrow = self.new_row(row, [pre, rword, post, word, left, right])
            for c, elem in enumerate(nrow):
                self.write_string(r, c, elem)
            r += 1

    def define_formats(self):
        self.format_head = self.workbook.add_format({'bold': True})
        self.format_right = self.workbook.add_format({'align': 'right'})
        self.format_light = self.workbook.add_format({'font_color': 'gray'})

    def set_formats(self):
        self.worksheet.set_row(0, None, self.format_head)
        for h in ['Before']:
            c = self.column(h)
            self.worksheet.set_column(c, c, None, self.format_right)
        for c, w in enumerate(self.widths):
            l = w
            if l > 15:
                l = int(0.8 * w + 3)
            l = max(l, 1)
            self.worksheet.set_column(c, c, l)
        for h in ['Left context', 'Right context']:
            c = self.column(h)
            self.worksheet.set_column(c, c, 10, self.format_light)
        self.worksheet.freeze_panes(1, 0)

    def convert(self, filein, fileout):
        self.workbook = xlsxwriter.Workbook(fileout)
        self.define_formats()
        self.worksheet = self.workbook.add_worksheet()
        self.f = open(filein, encoding='iso-8859-1')
        self.process_head()
        self.process_rest()
        self.set_formats()
        self.workbook.close()
        self.f.close()


def main():
    param = sys.argv[1:]
    if len(param) != 3:
        sys.exit('usage: {} MARKER INPUT OUTPUT'.format(sys.argv[0]))
    marker, filein, fileout = param

    conv = Convert(marker)
    conv.convert(filein, fileout)


main()
